/* Copyright [2019] [Adib Rastegarnia, Douglas Comer]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. 
*/

syntax = "proto3";


import "github.com/openconfig/gnmi/proto/gnmi/gnmi.proto";
import "p4/v1/p4runtime.proto";



package gni;

service gNI {

    // Fetch allows to read one or more P4 entities 
    // or retrieve a snapshot of data from the target using gNMI.
    rpc Fetch(FetchRequest) returns (FetchResponse);
    // Store allows too update one or more P4 entities 
    //or modify the state of data on the target using gNMI.
    rpc Store(StoreRequest) returns (StoreResponse);
    // Stream allows to implement the following operations:
    //   - stream network events using a bidirectional streaming channel 
    //     between the controller and the switch. 
    //   - Request the target to send it values of particular
    //     paths within the data tree. 
    //   - Implement gNOI network operations where a client 
    //     needs to send a stream of the requests to the server and 
    //     waits to receive a response from a device. 
    //   - Implement gNOI network operations where
    //     a client needs to send a request to the server and waits 
    //     to receive a stream of responses from a device. 
    rpc Stream (stream StreamRequest) returns (stream StreamResponse);
    // Command allows to implement 
    // gNOI network operations that a client needs 
    // to send a request to the server and waits 
    // to receive a response from a device. 
    rpc Command (CommandRequest) returns (CommandResponse);
}
// FetchRequest consists of one of the following gNMI and P4Runtime
// request messages. 
//   - gNMI GetRequest: A client sends the gNMI GetRequest to initiate a gNMI Get RPC 
//     that specifies the set of data elements for the target and the target returns a snapshot of
//     the requested data.
//   - gNMI CapabilityRequest: A client sends the gNMI CapabilityRequest to initiate a gNMI Capabilities RPC for requesting
//     the target to report its capabilities.
//   - P4 ReadRequest: A client sends the P4 ReadRquest 
//     to initiate a P4 RPC ReadRequest and read one or more P4 entities from the target.
//   - P4 GetForwardingPipelineConfigRequest: A client sends the P4 GetForwardingPipelineConfigRequest 
//     to initiate a P4 RPC GetForwardingPipelineConfig and get the current P4 forwarding-pipeline config.
message FetchRequest {
    
    oneof frequest {
        gnmi.GetRequest gnmiGetRequest = 1;
        gnmi.CapabilityRequest gnmiCapabilityRequest = 2;
        p4.v1.ReadRequest p4ReadRequest = 3;
        p4.v1.GetForwardingPipelineConfigRequest p4GetForwardingPipelineConfigRequest = 4;
    }   
}

// FetchResponse consists of one of the following gNMI and P4Runtime response 
// messages. 
//   - gNMI GetResponse: A gNMI target uses GetResponse to respond to a GetRequest from a client.
//   - gNMI CapabilityResponse: A gNMI target uses CapabilityResponse to report its capabilities to the
//     client within the Capabilities RPC.
//   - P4 ReadResponse: A P4 target uses ReadResponse to respond to a ReadRequest from a client. 
//   - P4 GetForwardingPipelineConfigResponse: A P4 target uses GetForwardingPipelineConfigResponse to 
//     report its current P4 forwarding-pipeline config.
message FetchResponse {

    oneof fresponse {
        gnmi.GetResponse gnmiGetResponse = 1;
        gnmi.CapabilityResponse gnmiCapabilityResponse = 2;
        p4.v1.ReadResponse p4ReadResponse = 3;
        p4.v1.GetForwardingPipelineConfigResponse p4GetForwardingPipelineConfigResponse = 4;
    }
}

// StoreRequest consists of one of the following gNMI and P4Runtime request 
// messages. 
//  - gNMI SetRequest: A client sends the gNMI SetRequest to initiate a gNMI Set RPC to 
//    update values in the data tree.
//  - P4 WriteRequest: A client sends the P4 WriteRequest to initiate a P4 Write RPC and
//       update one or more P4 entities on the target.
//  - P4 SetForwardingPipelineConfigRequest: A client sends the P4 SetForwardingPipelineConfigRequest to 
//    initiate a P4 SetForwardingPipelineConfig RPC and set the P4 forwarding-pipeline config.
message StoreRequest {

    oneof srequest {
        gnmi.SetRequest gnmiSetRequest = 1;
        p4.v1.WriteRequest p4WriteRequest = 2;
        p4.v1.SetForwardingPipelineConfigRequest p4SetForwardingPipelineConfigRequest = 3;
    }
}

// StoreResponse consists of one of the following gNMI and P4Runtime response
// messages. 
//  - gNMI SetResponse: A gNMI target uses SetResponse to report the result of the modifications to the data tree that 
//    a client specifies by initiating a Set RPC.
//  - P4 WriteResponse: A P4 target uses P4 WriteResponse to respond a P4 WriteRequest from a client. 
//  - P4 SetForwardingPipelineConfigResponse: A P4 target uses P4 SetForwardingPipelineConfigResponse 
//    to response a P4 SetForwardingPipelineConfigRequest from a client. 
message StoreResponse {

    oneof sresponse {
        gnmi.SetResponse gnmiSetResponse = 1;
        p4.v1.WriteResponse p4WriteResponse = 2;
        p4.v1.SetForwardingPipelineConfigResponse p4SetForwardingPipelineConfigResponse = 3;
    }
}

message StreamRequest {
    oneof srequest {
        gnmi.SubscribeRequest gnmiSubRequest = 1;
        p4.v1.StreamMessageRequest p4StreamMessageRequest = 2;
    }

}

message StreamResponse {
    oneof sresponse {
        gnmi.SubscribeResponse gnmiSubResponse = 1;
        p4.v1.StreamMessageResponse p4StreamMessageResponse = 2;
    }

}

message CommandRequest {
  

}

message CommandResponse {
    

}

